{"version":3,"sources":["ImageCard.js","ImageSearch.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","image","tags","split","className","src","webformatURL","user","views","favorites","downloads","likes","href","pageURL","map","tag","index","key","ImageSearch","searchText","useState","text","setText","onSubmit","e","preventDefault","onChange","target","value","type","placeholder","App","images","setImages","isLoading","setIsLoading","term","setTerm","useEffect","fetch","process","then","res","json","data","hits","catch","err","console","log","length","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"wPAsCeA,MApCf,YAA+B,IAAVC,EAAS,EAATA,MACXC,EAAOD,EAAMC,KAAKC,MAAM,KAC9B,OACI,6BACI,yBAAKC,UAAU,8CACf,yBAAKA,UAAU,SAASC,IAAKJ,EAAMK,eACnC,yBAAKF,UAAU,aACf,yBAAKA,UAAU,0CAAf,YACcH,EAAMM,MAEpB,wBAAIH,UAAU,QACV,4BACA,2CADA,IAC0BH,EAAMO,OAEhC,4BACA,gDADA,IAC+BP,EAAMQ,WAErC,4BACA,+CADA,IAC8BR,EAAMS,WAEpC,4BACA,2CADA,IAC0BT,EAAMU,QAGpC,uBAAGP,UAAU,8JAA8JQ,KAAMX,EAAMY,SAAvL,mBAEA,yBAAKT,UAAU,aACdF,EAAKY,KAAI,SAACC,EAAKC,GAAN,OAAgB,0BAAMC,IAAKD,EAAOZ,UAAU,4FACjDW,UC5BF,SAASG,EAAT,GAAoC,IAAdC,EAAa,EAAbA,WAAa,EACtBC,mBAAS,IADa,mBACvCC,EADuC,KACjCC,EADiC,KAM9C,OACI,yBAAKlB,UAAU,kDACb,0BAAMmB,SANK,SAACC,GACdA,EAAEC,iBACFN,EAAWE,IAIiBjB,UAAU,mBAClC,yBAAKA,UAAU,8DACf,2BAAOsB,SAAU,SAAAF,GAAC,OAAIF,EAAQE,EAAEG,OAAOC,QAAQxB,UAAU,kHAAkHyB,KAAK,OAAOC,YAAY,yBACnM,4BAAQ1B,UAAU,kIAAkIyB,KAAK,UAAzJ,aCsBGE,MA9Bf,WAAgB,IAAD,EACeX,mBAAS,IADxB,mBACNY,EADM,KACEC,EADF,OAEqBb,oBAAS,GAF9B,mBAENc,EAFM,KAEKC,EAFL,OAGWf,mBAAS,IAHpB,mBAGNgB,EAHM,KAGAC,EAHA,KAeb,OAVAC,qBAAU,WACRC,MAAM,gCAAD,OAAiCC,qCAAjC,cAA4EJ,EAA5E,kCACFK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJX,EAAUW,EAAKC,MACfV,GAAa,MAEdW,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC3B,CAACX,IAGF,yBAAKhC,UAAU,qBACb,kBAACc,EAAD,CAAaC,WAAY,SAACE,GAAD,OAAUgB,EAAQhB,OAEzCa,GAA+B,IAAlBF,EAAOkB,QAAgB,wBAAI9C,UAAU,sCAAd,mBAErC8B,EAAY,wBAAI9B,UAAU,sCAAd,cAAqE,yBAAKA,UAAU,0BAC9F4B,EAAOlB,KAAI,SAAAb,GAAK,OACf,kBAAC,EAAD,CAAWgB,IAAKhB,EAAMkD,GAAIlD,MAAOA,UChBvBmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.ccb9d019.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction ImageCard({ image }) {\r\n    const tags = image.tags.split(',')\r\n    return (\r\n        <div>\r\n            <div className=\"max-w-sm rounded overflow-hidden shadow-lg\">\r\n            <img className=\"w-full\" src={image.webformatURL} />\r\n            <div className=\"px-6 py-4\">\r\n            <div className=\"font-bold text-purple-600 text-xl mb-2\">\r\n                Photo by {image.user}\r\n            </div>\r\n            <ul className=\"mb-5\">\r\n                <li>\r\n                <strong>Views: </strong> {image.views}\r\n                </li>\r\n                <li>\r\n                <strong>Favourites: </strong> {image.favorites}\r\n                </li>\r\n                <li>\r\n                <strong>Downloads: </strong> {image.downloads}\r\n                </li>\r\n                <li>\r\n                <strong>Likes: </strong> {image.likes}\r\n                </li>\r\n            </ul>\r\n            <a className=\"bg-transaparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 mt-20 border border-blue-500 hover:border-transparent rounded-full\" href={image.pageURL}>Download Image</a>\r\n            </div>\r\n            <div className=\"px-6 py-4\">\r\n            {tags.map((tag, index) => <span key={index} className=\"inline-block bg-gray-200 rounded-full px-3 py-2 text-sm font-semibold text-gray-700 mr-2\">\r\n                {tag}\r\n            </span>)}\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageCard","import React, {useState} from 'react'\r\n\r\nexport default function ImageSearch({searchText}) {\r\n    const [text, setText] = useState('')\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        searchText(text);\r\n      }\r\n    return (\r\n        <div className='max-w-sm rounded overflow-hidden my-10 mx-auto'>\r\n          <form onSubmit={onSubmit} className=\"w-full max-w-sm\">\r\n            <div className=\"flex items-center border-b border-b-2 border-teal-500 py-2\">\r\n            <input onChange={e => setText(e.target.value)} className=\"appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none\" type=\"text\" placeholder=\"Search Image Term...\" />\r\n            <button className=\"flex-shrink-0 bg-teal-500 hover:bg-teal-700 border-teal-500 hover:border-teal-700 text-sm border-4 text-white py-1 px-2 rounded\" type=\"submit\">\r\n          Search\r\n          </button>\r\n          </div>\r\n          </form>\r\n            </div>\r\n      )\r\n}\r\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport ImageCard from './ImageCard'\nimport ImageSearch from './ImageSearch'\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [term, setTerm] = useState('');\n\n  useEffect(() => {\n    fetch(`https://pixabay.com/api/?key=${process.env.REACT_APP_PIXABAY_API_KEY}&q=${term}&image_type=photo&pretty=true`)\n      .then(res => res.json())\n      .then(data => {\n        setImages(data.hits);\n        setIsLoading(false);\n      })\n      .catch(err => console.log(err));\n  }, [term]);\n\n  return (\n    <div className=\"container mx-auto\">\n      <ImageSearch searchText={(text) => setTerm(text)} />\n\n      {!isLoading && images.length === 0 && <h1 className=\"text-5xl text-center mx-auto mt-32\">No Images Found</h1> }\n\n      {isLoading ? <h1 className=\"text-6xl text-center mx-auto mt-32\">Loading...</h1> : <div className=\"grid grid-cols-3 gap-4\">\n        {images.map(image => (\n          <ImageCard key={image.id} image={image} />\n        ))}\n      </div>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}